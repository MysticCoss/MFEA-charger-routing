from elements.Sensor import Sensor
from problem.Configs import Configs
from problem.ProblemManager import ProblemManager
import math

class NetworkDivider:
    @staticmethod
    def cluster(sectorsNo: int, sensors: 'list[Sensor]') -> 'list[list[Sensor]]':
        phi = 2.0 * math.pi / (1.0 * sectorsNo) #the angle in radian of each sector (our working space is a circle centered by service station)
        #Please pay attention that a sector can be empty and this code does not handle that situation

        result: 'list[list[Sensor]]'
        result=[]
        # resultID = [
        #     [81 ,  433 ,  192 ,  64 ,  87 ,  583 ,  527 ,  848 ,  644 ,  892 ,  730 ,  55 ,  19 ,  981 ,  139 ,  152 ,  345 ,  498 ,  170 ,  376 ,  656 ,  454 ,  745 ,  269 ,  314 ,  891 ,  284 ,  513 ,  763 ,  167 ,  505 ,  750 ,  759 ,  176 ,  181 ,  747 ,  1 ,  27 ,  255 ,  299 ,  357 ,  235 ,  774 ,  398 ,  694 ,  875 ,  54 ,  783 ,  370 ,  321],
        #     [580 ,  618 ,  493 ,  684 ,  870 ,  130 ,  121 ,  511 ,  175 ,  132 ,  766 ,  744 ,  523 ,  808 ,  919 ,  751 ,  468 ,  499 ,  29 ,  252 ,  165 ,  845 ,  131 ,  240 ,  445 ,  738 ,  46 ,  346 ,  242 ,  666 ,  297 ,  936 ,  422 ,  732 ,  777 ,  426 ,  792 ,  645 ,  646 ,  330 ,  576 ,  491 ,  67 ,  765 ,  737 ,  30 ,  407 ,  784 ,  935 ,  605],
        #     [185 ,  39 ,  412 ,  57 ,  733 ,  254 ,  559 ,  522 ,  223 ,  590 ,  804 ,  449 ,  283 ,  377 ,  974 ,  500 ,  317 ,  521 ,  925 ,  917 ,  781 ,  416 ,  338 ,  840 ,  50 ,  313 ,  359 ,  945 ,  648 ,  798 ,  595 ,  342 ,  954 ,  711 ,  924 ,  395 ,  617 ,  212 ,  424 ,  180 ,  883 ,  634 ,  944 ,  161 ,  256 ,  318 ,  962 ,  567 ,  143 ,  461],
        #     [177 ,  975 ,  553 ,  633 ,  677 ,  293 ,  794 ,  120 ,  272 ,  420 ,  515 ,  657 ,  539 ,  516 ,  362 ,  959 ,  770 ,  63 ,  270 ,  968 ,  816 ,  623 ,  372 ,  549 ,  518 ,  243 ,  593 ,  839 ,  882 ,  250 ,  217 ,  591 ,  337 ,  72 ,  860 ,  5 ,  465 ,  674 ,  893 ,  669 ,  115 ,  949 ,  268 ,  776 ,  480 ,  375 ,  690 ,  97 ,  826 ,  683],
        #     [207 ,  940 ,  709 ,  888 ,  896 ,  780 ,  973 ,  85 ,  695 ,  452 ,  62 ,  311 ,  762 ,  725 ,  982 ,  846 ,  37 ,  287 ,  327 ,  710 ,  448 ,  444 ,  234 ,  778 ,  865 ,  470 ,  298 ,  806 ,  614 ,  335 ,  996 ,  394 ,  382 ,  174 ,  247 ,  795 ,  244 ,  704 ,  222 ,  526 ,  301 ,  156 ,  610 ,  754 ,  978 ,  877 ,  285 ,  319 ,  507 ,  551],
        #     [651 ,  341 ,  624 ,  336 ,  514 ,  399 ,  869 ,  387 ,  889 ,  900 ,  209 ,  325 ,  251 ,  460 ,  805 ,  324 ,  484 ,  547 ,  88 ,  384 ,  598 ,  707 ,  153 ,  149 ,  719 ,  437 ,  743 ,  374 ,  415 ,  225 ,  443 ,  599 ,  718 ,  490 ,  275 ,  78 ,  983 ,  560 ,  378 ,  734 ,  320 ,  246 ,  502 ,  295 ,  664 ,  408 ,  999 ,  843 ,  258 ,  854],
        #     [801 ,  802 ,  322 ,  486 ,  432 ,  178 ,  904 ,  596 ,  672 ,  211 ,  36 ,  881 ,  941 ,  107 ,  393 ,  866 ,  961 ,  702 ,  537 ,  457 ,  504 ,  671 ,  171 ,  939 ,  201 ,  471 ,  14 ,  271 ,  520 ,  692 ,  425 ,  748 ,  273 ,  976 ,  241 ,  842 ,  699 ,  761 ,  791 ,  833 ,  687 ,  187 ,  162 ,  103 ,  608 ,  916 ,  872 ,  863 ,  303 ,  998],
        #     [697 ,  713 ,  35 ,  717 ,  472 ,  215 ,  534 ,  168 ,  563 ,  894 ,  7 ,  245 ,  423 ,  991 ,  790 ,  885 ,  932 ,  18 ,  304 ,  902 ,  858 ,  550 ,  647 ,  157 ,  609 ,  109 ,  712 ,  77 ,  886 ,  105 ,  197 ,  533 ,  352 ,  909 ,  126 ,  536 ,  73 ,  59 ,  832 ,  22 ,  249 ,  630 ,  450 ,  279 ,  10 ,  20 ,  726 ,  296 ,  796 ,  84],
        #     [874 ,  429 ,  146 ,  530 ,  600 ,  652 ,  625 ,  995 ,  380 ,  829 ,  650 ,  818 ,  116 ,  218 ,  439 ,  556 ,  483 ,  739 ,  435 ,  172 ,  261 ,  660 ,  463 ,  979 ,  447 ,  40 ,  541 ,  396 ,  653 ,  466 ,  558 ,  584 ,  706 ,  855 ,  990 ,  9 ,  189 ,  3 ,  257 ,  615 ,  401 ,  602 ,  588 ,  137 ,  145 ,  195 ,  76 ,  98 ,  23 ,  659],
        #     [348 ,  248 ,  487 ,  473 ,  340 ,  102 ,  823 ,  25 ,  21 ,  481 ,  354 ,  570 ,  141 ,  53 ,  219 ,  495 ,  994 ,  331 ,  921 ,  942 ,  49 ,  930 ,  787 ,  703 ,  8 ,  411 ,  106 ,  364 ,  878 ,  95 ,  867 ,  678 ,  363 ,  714 ,  760 ,  964 ,  517 ,  587 ,  938 ,  358 ,  4 ,  127 ,  366 ,  485 ,  834 ,  239 ,  410 ,  929 ,  38 ,  199],
        #     [205 ,  947 ,  851 ,  955 ,  83 ,  557 ,  124 ,  430 ,  887 ,  797 ,  478 ,  253 ,  360 ,  328 ,  112 ,  191 ,  822 ,  52 ,  758 ,  24 ,  266 ,  571 ,  264 ,  638 ,  689 ,  793 ,  200 ,  316 ,  723 ,  440 ,  698 ,  65 ,  821 ,  912 ,  288 ,  144 ,  871 ,  69 ,  950 ,  529 ,  339 ,  535 ,  291 ,  923 ,  333 ,  933 ,  355 ,  951 ,  779 ,  194],
        #     [108 ,  771 ,  868 ,  397 ,  642 ,  756 ,  746 ,  727 ,  670 ,  122 ,  385 ,  306 ,  129 ,  154 ,  663 ,  952 ,  16 ,  767 ,  140 ,  768 ,  441 ,  807 ,  43 ,  12 ,  696 ,  82 ,  731 ,  658 ,  561 ,  113 ,  96 ,  966 ,  417 ,  34 ,  404 ,  51 ,  309 ,  772 ,  997 ,  984 ,  389 ,  977 ,  911 ,  862 ,  857 ,  104 ,  873 ,  574 ,  937 ,  620],
        #     [80 ,  193 ,  769 ,  229 ,  856 ,  825 ,  392 ,  841 ,  934 ,  540 ,  724 ,  519 ,  91 ,  542 ,  302 ,  847 ,  58 ,  686 ,  764 ,  402 ,  691 ,  438 ,  879 ,  356 ,  830 ,  119 ,  969 ,  155 ,  286 ,  323 ,  292 ,  183 ,  532 ,  985 ,  782 ,  987 ,  943 ,  901 ,  188 ,  151 ,  501 ,  676 ,  227 ,  740 ,  371 ,  639 ,  307 ,  386 ,  643 ,  506],
        #     [99 ,  729 ,  575 ,  136 ,  661 ,  427 ,  828 ,  773 ,  41 ,  907 ,  948 ,  809 ,  963 ,  956 ,  203 ,  606 ,  603 ,  2 ,  489 ,  905 ,  263 ,  989 ,  230 ,  365 ,  903 ,  631 ,  616 ,  831 ,  679 ,  582 ,  400 ,  555 ,  728 ,  160 ,  274 ,  524 ,  752 ,  742 ,  971 ,  927 ,  859 ,  693 ,  705 ,  775 ,  554 ,  17 ,  436 ,  890 ,  622 ,  68],
        #     [368 ,  494 ,  434 ,  572 ,  1000 ,  673 ,  667 ,  315 ,  214 ,  190 ,  601 ,  668 ,  475 ,  920 ,  123 ,  682 ,  61 ,  56 ,  910 ,  864 ,  908 ,  206 ,  28 ,  332 ,  607 ,  451 ,  381 ,  820 ,  799 ,  305 ,  611 ,  419 ,  467 ,  824 ,  604 ,  680 ,  510 ,  13 ,  897 ,  627 ,  594 ,  164 ,  26 ,  619 ,  453 ,  134 ,  233 ,  895 ,  442 ,  232],
        #     [488 ,  621 ,  456 ,  528 ,  281 ,  852 ,  329 ,  179 ,  259 ,  236 ,  312 ,  931 ,  922 ,  957 ,  71 ,  237 ,  876 ,  810 ,  546 ,  654 ,  260 ,  220 ,  836 ,  665 ,  958 ,  662 ,  636 ,  914 ,  276 ,  421 ,  569 ,  347 ,  562 ,  482 ,  628 ,  503 ,  564 ,  90 ,  42 ,  972 ,  265 ,  543 ,  685 ,  11 ,  861 ,  89 ,  150 ,  592 ,  786 ,  163],
        #     [413 ,  343 ,  228 ,  184 ,  166 ,  159 ,  898 ,  262 ,  277 ,  716 ,  812 ,  509 ,  755 ,  204 ,  853 ,  785 ,  597 ,  373 ,  469 ,  497 ,  86 ,  114 ,  409 ,  476 ,  280 ,  589 ,  135 ,  637 ,  700 ,  477 ,  721 ,  788 ,  565 ,  383 ,  926 ,  577 ,  94 ,  612 ,  803 ,  850 ,  379 ,  92 ,  629 ,  641 ,  548 ,  492 ,  675 ,  815 ,  210 ,  701],
        #     [735 ,  431 ,  353 ,  226 ,  720 ,  125 ,  915 ,  101 ,  953 ,  880 ,  310 ,  741 ,  344 ,  100 ,  992 ,  418 ,  216 ,  800 ,  899 ,  640 ,  403 ,  814 ,  531 ,  525 ,  31 ,  308 ,  819 ,  349 ,  428 ,  552 ,  753 ,  722 ,  655 ,  566 ,  844 ,  458 ,  326 ,  496 ,  213 ,  128 ,  290 ,  988 ,  367 ,  512 ,  390 ,  813 ,  986 ,  838 ,  736 ,  906],
        #     [117 ,  835 ,  632 ,  138 ,  626 ,  48 ,  827 ,  350 ,  369 ,  231 ,  578 ,  688 ,  406 ,  749 ,  142 ,  508 ,  545 ,  649 ,  75 ,  913 ,  196 ,  681 ,  635 ,  479 ,  464 ,  238 ,  133 ,  282 ,  208 ,  414 ,  586 ,  47 ,  111 ,  474 ,  158 ,  110 ,  581 ,  579 ,  351 ,  928 ,  186 ,  224 ,  6 ,  15 ,  459 ,  960 ,  708 ,  93 ,  715 ,  789],
        #     [811 ,  32 ,  182 ,  221 ,  967 ,  66 ,  993 ,  334 ,  405 ,  60 ,  585 ,  147 ,  462 ,  918 ,  446 ,  388 ,  148 ,  202 ,  300 ,  391 ,  45 ,  757 ,  538 ,  169 ,  946 ,  837 ,  79 ,  198 ,  278 ,  849 ,  289 ,  455 ,  613 ,  970 ,  44 ,  70 ,  980 ,  965 ,  361 ,  884 ,  173 ,  294 ,  573 ,  33 ,  817 ,  568 ,  118 ,  74 ,  267 ,  544]
        # ]   
        # sectorsDict:dict[int,Sensor]
        # sectorsDict= {sensor.id: sensor for sensor in sensors}
        # for ids in resultID:
        #     l:list[Sensor]
        #     l=[]
        #     for id in ids:
        #         a=sectorsDict.get(id)
        #         if a is not None:
        #             l.append(a)
        #     result.append(l)
            
        # outF = open("abc.txt", "w")
        for k in range(sectorsNo):
            result.append([])
            # outF.write("[")
            for s in sensors:
                #first vector (ox): (1,0)
                firstvector = (1,0)

                #calculate second vector
                secondvector = (s.x-ProblemManager.serviceStation.x, s.y-ProblemManager.serviceStation.y)

                #calculate the angle between 2 vectors using dot product
                #dot product
                dotProduct = firstvector[0] * secondvector[0] + firstvector[1] * secondvector[1]
                #calculate length product
                lengthProduct = math.sqrt(pow(firstvector[0],2)+pow(firstvector[1],2)) * math.sqrt(pow(secondvector[0],2)+pow(secondvector[1],2))
                cosphi = dotProduct / lengthProduct
                angle = math.acos(cosphi)
                if secondvector[1] < 0:
                    angle = 2*math.pi - angle

                #if it belong to this sector then add it 
                if angle > k * phi and angle < (k + 1) * phi:
                    result[k].append(s)
        #             outF.write(str(s.id)+", ")
        #     outF.write("],\n")
        # outF.close()
        # exit(0)
        return result